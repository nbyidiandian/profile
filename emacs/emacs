

(defun kill-and-join-forward (&optional arg)
  "If at end of line, join with following; otherwise kill line.
Deletes whitespace at join."
  (interactive "P")
  (if (and (eolp) (not (bolp)))
      (progn
        (delete-indentation t)
        (if (looking-at " $")
            (delete-char 1)))
    (kill-line arg)))


(defun yank-and-indent ()
  "Yank and then indent the newly formed region according to mode."
  (interactive)
  (yank)
  (call-interactively 'indent-region))



(defun file-name-delemited-to-camel-case (name)
  "convert \"file_name\" to \"FileName\" "
  (progn
    (mapconcat #'capitalize (split-string
                             (file-name-base name) "_") "")))


(defun file-name-base (name)
  "This function is the composition of file-name-sans-extension and file-name-nondirectory"
  (progn
    (file-name-nondirectory (file-name-sans-extension name))))


(defun file-name-cpp-include-guard (name)
  "Include guard for cpp header file"
  (progn
    (upcase (concat "_"
                    (file-name-nondirectory
                     (directory-file-name
                      default-directory))
                    "_"
                    (file-name-nondirectory (file-name-sans-extension name))
                    "_"
                    (file-name-extension name)
                    "_"))))


;; bind keys
(global-set-key (kbd "C-k") 'kill-and-join-forward)
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-y") 'yank-and-indent)
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)



;; all backups goto ~/.backups instead in the current directory
(setq backup-directory-alist (quote (("." . "~/.backups"))))

;; column-number
(setq column-number-mode t)

;; language
(set-language-environment 'Chinese-GB)
(prefer-coding-system 'utf-8-unix)

;; highlight matching pairs of parentheses and other characters
;; (show-paren-mode 1)

;; hide menu-bar
(menu-bar-mode -1)


;; indent
(setq-default c-default-style "k&r"
              c-basic-offset 4
              tab-width 4
              indent-tabs-mode nil)


;; use c++-mode for .h file
(setq auto-mode-alist (cons '("\.h$" . c++-mode) auto-mode-alist))


;; google c style
(add-to-list 'load-path
             "~/.emacs.d/plugins/google")
(require 'google-c-style)
;; (add-hook 'c-mode-common-hook 'google-set-c-style)
;; (add-hook 'c-mode-common-hook 'google-make-newline-indent)
;; (add-hook 'c-mode-common-hook  '(lambda () (c-toggle-hungry-state 1)))

(c-add-style "Google" google-c-style nil)
(defconst custom-google-c-style
  '("Google" ;;; base style
    (c-basic-offset . 4)
    (c-hanging-semi&comma-criteria
     . (c-semi&comma-no-newlines-before-nonblanks
        c-semi&comma-no-newlines-for-oneline-inliners
        c-semi&comma-inside-parenlist))
    (c-cleanup-list . (
                                        ; brace-else-brace
                                        ; brace-elseif-brace
                       brace-catch-brace
                       empty-defun-braces
                       defun-close-semi
                       list-close-comma
                       scope-operator))
    ;;; indent
    (c-offsets-alist
     . ((access-label . -) ;; other
        ))))

(defun custom-google-set-c-style ()
  (interactive)
  (make-local-variable 'c-tab-always-indent)
  (setq c-tab-always-indent t)
  (c-toggle-auto-hungry-state 1)
  (c-toggle-auto-newline -1)
  (c-add-style "custom-google-style" custom-google-c-style t))

;; open .h as c++-mode
(setq auto-mode-alist (cons '("\.h$" . c++-mode) auto-mode-alist))

(add-hook 'c-mode-common-hook 'custom-google-set-c-style)
(add-hook 'c-mode-common-hook 'google-make-newline-indent)


;; jump from .h to .cpp
(add-hook 'c-mode-common-hook
          (lambda()
            (local-set-key  (kbd "C-c o") 'ff-find-other-file)))


;; saveplace
(require 'saveplace)
(setq-default save-place t)


;; yasnippet
(add-to-list 'load-path
             "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet) ;; not yasnippet-bundle
(yas/initialize)
(yas/load-directory "~/.emacs.d/plugins/yasnippet/snippets")


;; auto-complete
(add-to-list 'load-path "~/.emacs.d/plugins/auto-complete")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/plugins/auto-complete/ac-dict")
(ac-config-default)

;; cscope
(add-to-list 'load-path "/usr/local/Cellar/cscope/15.7a/bin/")
(require 'xcscope)
(setq-default cscope-display-cscope-buffer t)

;; yes-or-no
(defalias 'yes-or-no-p 'y-or-n-p)

;; ido-mode
(setq ido-enable-flex-matching t) ;; enable fuzzing matching
(setq ido-everywhere t)

;; (setq ido-use-filename-at-point 'guess)
(require 'ido)
(ido-mode 1)
(ido-everywhere 1)

;; show-paren-mode
(show-paren-mode t)

;; auto sync project
(add-to-list 'load-path "~/.emacs.d/plugins/auto-sync/")
(require 'auto-sync)
(auto-sync-after-save-buffer-done)
